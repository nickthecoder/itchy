New Server
==========
Install debian onto the SSD.
Create a single partition 90% of the disk.

Get a spare drive, and format it with one large partition and three small ones.
The small ones will be for swap and /var/log and /tmp
The large one will be for /gidea (a subset)

Get the nvidia driver working
    https://wiki.debian.org/NvidiaGraphicsDrivers

Install all of the software onto root partition, except Myth

Make a backup of
    /gidea/projects
    /home/nick
    /home/nalin
    /gidea/music/ a small subset of default to test only
    /gidea/images

Set the computer name to be giddydom.healthy
And have /etc/hosts resolve giddyserv to localhost and old-giddyserv to 192.168.1.2

tar /etc /boot from real giddyserv and copy it over.

Get tomcat and apache working

Backup and copy over the mythdatabase and familyalbum database (others?)

Remove the old / partition from real giddyserv and replace it with SSD
This also contains /mythdata and /backup
Mount /giddyserv (raid array).

Install the double DVB card
Set up Myth - maybe moving the box down stairs for access to the aerial.

Backup the SSD, so that if it fails, I can get back to a good system quickly.


Firewall
Backup scripts
Website indexer (butchers)



Bed covers
Glasses
Vacuum bathroom

TODO
====

Make Layer an Interface
    Make ActorsLayer an interface too

    Follow up on the TODOs

Fix animation messages.
    Let the top-most animation have a message, so that its easy to see
    AND/OR have an edit window for Compound animations too (don't toggle).    

Starting other games and then Asteroids errors.

Actor,startEvent isn't elegant - its only used by the editor, so should be on scene actor and sceneactorbehaviour?

Rename a scene from scene designer does not rename
    and doesn't update the ScenesEditor table

Reloading a SceneBehaviour script causes the properties to double.

Changing SceneBehaviour doesn't update the SceneBehaviourProperty components


Create a Compound Behaviour, which has a ClassName array of other Behaviours, or maybe a Map of
    name->ClassName.
    Properties will be taken from the all of the child behaviour's properties.
    tick and other methods will call each in child behaviour in turn.
        Therefore the name->ClassName will need to be ordered, so itsn't a simple Map.
        
    This could be so common, perhaps its worth the ClassName or ClassNameProperty to do this.
    If the selected classname instanceof Multiple, then the ClassNameProperty's Component "..." changes
    from just picking a class from a list, to picking a list of name->ClassName pairs.
    That's nice because it can fire a change event, which will make the list of properties rebuild.
    We can use CompoundBehaviour in conjunction with ScriptedBehaviour, and therefore no extra
    code for compound js behaviours.

    Problem ?
    When looking for collisions, it fine using brute force, as we start off by iterating over each Behaviour with that tag.
    But when using Neighbourhood, we start with the actors. Ok, we can have "hadTag" on Behaviour, and CompoundBehaviour will
    do the compound thing. 

    Problem ?
    We only want one collision strategy per Actor, so it can't live on Behaviour any more.

    Problem!
        As tags are on Actor, searching for the nearest "shootable" will return an actor, but it's
        behaviour won't be shootable, one of the CompoundBehaviour's will be.
        Tags MUST be on Behaviour.
            We first need to remove old "active" tag, as this is an Actor thing, not a Behaviour.
            Do we need Active at all? The closest I've come to the need for active, is the activate
            delay, but that's implemented by being active all the time!!!
        Not so fast, how about tags such as "deadly" - yeah that's still ok, one of the Beahviours will
        be deadly, and the rest wont.

Appearance can chop off part of the Pose, useful for the Rod in Thrust - instead of scaling it.
    Can also use it for a speed guage on Rain
        Create a general purpose ProgressBar behaviour.
        Could I use it for the shield indicator in DrunkInvaders instead of the multiple images?
    Or could create a speed dial, as that just needs the hand to be rotated!

Create an actor from a costume easily.
    Could be on Costume taking no arguments
    Could be on Game or Resources taking the costume name.

ClassName shouldn't be in script package, should be in itchy package.

check all code for this.[a-z 0-9]*\(, and remove the "this".

What's Next
===========

Add pose and nine patch : try to show the image sub directory if it exists.
    Copy images if outside of the game's directory
        Can do this during SAVE
    
Create a game from scratch, deliberately making syntax errors in the code.
    Fix any bugs and improve the UI along the way. 

Catch all ScriptExceptions
    Report them to ScriptErrorLog, which will also write to stderr (not as a stack trace)
    An icon on the popup Layer shows when a new error has occurred. Click to open the log viewer.
        "Clear" button will remove the icon from the popup layer. 

Check that a broken script doesn't cause problems :
    Costume Properties
    Behaviour in editor
    Behaviour in designer
    SceneBehaviour in editor
    SceneBehaviour in designer
    Game

Bugs
====

On Remove, there is no check that the resource isn't being used by something else.
    Easy pose, animation, sound..., but tricky for costume, as they could be used in any scene

Renaming a costume will cause scenes that use it to fail.

Costumes are updated even when cancel is pressed (need to COPY the costume?)
    CostumesEditor needs to copy the costume so that cancel works.

Later
=====

Should poses and animations be owned by Resources, or by Costume? Some are used by only one, and therefore is annoying to be in a
big horrible unorganised list.
    When editing a pose it has a "shared" tick box, which just toggles
    When listing Poses shows : all, shared or a single costume's. (via a picker button).
    Pose names are still unique, but default to costumeName.generatedName when first added via a costume and just generatedName otherwise.     
    If an unshared pose is removed from its costume, then it is deleted.
    
Same pattern for sounds and animations, not for font or nine patches.

Make the Costumes tab first (or second).


How about a Scripts tab
    List all scripts double click to edit.
    Show errors / Clear errors

A Gallery
    Import poses, costumes, fonts, animations etc from a set of "games" in the gallery, or from any
    other game's resources.

Is the special Map needed which allows scripted Costume properties to be retrieved from BeanHelper
    Now we have ScriptedObject, isn't it better to have it done that way?
    Would need a "set" version of the special code too.

Scripted Behaviours can't detect MouseEvents.
    The whole Layer as a MouseListener needs looking at.

"include" javascript function, which includes another script file.

Copy the arm binary
    Test Itchy on Pi

Text Costumes.
    Buttons can have sounds and animations

Compile on raspPi?

Get Thrust to run via "launch" without the resource symlinks to itchy.
    Need thrusts jar file to be in a lib directory within its resources, and for the jar to be loaded
    after java has started.

Bucket to be more transparent
Water looks naff

The stars on Drunk Invaders backgrounds should have more variation (alpha and slight colour - maybe size too).

Component : Override all rules. Currently only Font can be overridden.  
    Allow to be reset to default (i.e. be restyled). 

Create a game which uses the GUI        

The Behaviours should have the tags, because its them that have the Interface.
Also, I could change the behaviour, and the tags would magically vanish (without the "removeAll"!
Don't use tags for "active".

Container.render should get the NinePatches to render directly onto the gc, not via a temp surface.
RenderableInterface is rubbish. NinePatches should be told where and how large to draw themselves
   (assuming that they can render onto a existing surface rather than needing a new surface).

Replace crufty render and render2 methods with the concept of a Graphics Context.
To scroll, a sub-layer, push the context, alter its mapping, call the childrens render,
then pop the context.

Appearance optimised so that it doesn't need to re-render the appearance to get the worldRectangle
    Maybe calculate the maximum rectangle for the Pose for any rotation
    When asked for its worldRect, if cached, returned that, other wise if direction == 0, return pose.rectangle * scale, otherwise return maximum rect * scale   


