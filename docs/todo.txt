    
TODO
====

Need to allow Makeup appear at any stage in the pipeline from the editor. e.g. a Decoration which should not be rotated with the actor.
Or a clip done at the end.
    A tick box "Advanced" will reveal a Compound Makeup as a table, with the standard items as well as the current Makeup if its not Null. 


Optimise Explosion by using fixAppearance for projectiles which are turned, but won't rotate.

PACKAGE !!!

Test on windows.

Update class diagrams (moved extras classes)

Follow up on the TODOs

Send to Asul

Allow Compound makeups
Glitter Makeup - sprinkle poses randomly. use getpixel.
Sparkle, as glitter, but with animated parts which appear/disappear.
Decoration - Adds a Pose to a given place relative to the actor's x,y.

Simple convolution filter
    Filters don't need to be square.
    Create empty space around the image. Later give option of duping the image's edge.
    Apply the convolution matrix.
        For RGB, just apply the matrix to each channel in turn.
        For RGBA we'd need to change the final DIVIDE to discount transparent pixels. i.e divide by sub of matrix * alphas.
        Apply the matrix to alpha as normal.
        
   Many things just need the alpha channel convolved?
           
Look at rotozoom, and try to implement a generic transformation matrix???

Cache the results of Makeup on Appearance.
    If we apply Makeup first (do clipping afterwards), then we only re-apply makeup if the pose has changed.
    Don't forget to free the cache when possible.

BlitModes on Pose, so a "spotlight" can ADD

Clip Animation
    Test
Test other animations not on the animations test page.

Try the FLA files from Glitch
    http://www.glitchthegame.com/public-domain-game-art/

Compound Role
    the editor knows about the interface, and adds a table under the Role ClassName.
    The currently selected role's properties are shown on the right of the table.
    This can be in ADDITION to the CompoundRole's properties.
Same feature for SceneDirector.

Create some tests for Views in the tests game.
    Create a Stage and view in the middle of the screen
    Add buttons which scroll the view
    Add a button inside it to test the offset
    Create a compound view in the middle with other views inside it.
        Use the same Stage for each of the mini views to test the 1:many Stage->View with mouse listeners and capture mouse.

BUG: Rename a scene from scene designer does not rename
    and doesn't update the ScenesEditor table

BUG: Reloading a SceneBehaviour script causes the properties to double.

BUG: Changing SceneBehaviour doesn't update the SceneBehaviourProperty components

Animation test
    Test and edit are done in the same full screen editor - like scene designer.
    Add: Pick a pose, then place it on the world.
    A large time-line pane shows an overview of the animation. Dragging controls will change the tick or loops of the animation.
        Can fill the whole page, with the animation on top of it.
    Click at a point in the time-line to show that frame.
    Save the pose and start x,y, direction, heading with each animation ("test" tag)

Asteroids
    Test strength - create a hard rock, which can't be destroyed by the puny bullets.
    Multiple guns
    Create "pickups" including a better gun.
        Ship will have a "bulletName", if set, then it uses it directly to get the bullet costume, otherwise it uses the
            existing "companion" feature.


Create an isometric stage

Create a wrapped StageView (where the x and/or y wrap around)

Create a ScaledStageView.
    Place the StageView's eventual blit into a protected method? wont work as its also scaling the clip area.

"Duplicate" button in Animation editor

Drag and drop to move and reorder animation in the editor.



Explanatory games
    e.g. Showing the different between heading and direction.
    
check all code for this.[a-z 0-9]*\(, and remove the "this".

Create a Compound Behaviour, which has a ClassName array of other Behaviours, or maybe a Map of
    name->ClassName.
    Properties will be taken from the all of the child behaviour's properties.
    tick and other methods will call each in child behaviour in turn.
        Therefore the name->ClassName will need to be ordered, so itsn't a simple Map.
        
    This could be so common, perhaps its worth the ClassName or ClassNameProperty to do this.
    If the selected classname instanceof Multiple, then the ClassNameProperty's Component "..." changes
    from just picking a class from a list, to picking a list of name->ClassName pairs.
    That's nice because it can fire a change event, which will make the list of properties rebuild.
    We can use CompoundBehaviour in conjunction with ScriptedBehaviour, and therefore no extra
    code for compound js behaviours.

    Problem ?
    When looking for collisions, it fine using brute force, as we start off by iterating over each Behaviour with that tag.
    But when using Neighbourhood, we start with the actors. Ok, we can have "hadTag" on Behaviour, and CompoundBehaviour will
    do the compound thing. 

    Problem ?
    We only want one collision strategy per Actor, so it can't live on Behaviour any more.

    Problem!
        As tags are on Actor, searching for the nearest "shootable" will return an actor, but it's
        behaviour won't be shootable, one of the CompoundBehaviour's will be.
        Tags MUST be on Behaviour.
            We first need to remove old "active" tag, as this is an Actor thing, not a Behaviour.
            Do we need Active at all? The closest I've come to the need for active, is the activate
            delay, but that's implemented by being active all the time!!!
        Not so fast, how about tags such as "deadly" - yeah that's still ok, one of the Beahviours will
        be deadly, and the rest wont.

What's Next
===========

Create a dedicated pinkwino instance for Itchy

    Editor Tips
        Middle button to drag view.
        Ctrl to select from any layer
        Shift to select from below the current object 

    Class Overview

Add pose and nine patch : try to show the image sub directory if it exists.
    Copy images if outside of the game's directory
        Can do this during SAVE
    
Create a game from scratch, deliberately making syntax errors in the code.
    Fix any bugs and improve the UI along the way. 

Catch all ScriptExceptions
    Report them to ScriptErrorLog, which will also write to stderr (not as a stack trace)
    An icon on the popup Layer shows when a new error has occurred. Click to open the log viewer.
        "Clear" button will remove the icon from the popup layer. 

Check that a broken script doesn't cause problems :
    Costume Properties
    Behaviour in editor
    Behaviour in designer
    SceneBehaviour in editor
    SceneBehaviour in designer
    Game

Bugs
====

On Remove, there is no check that the resource isn't being used by something else.
    Easy pose, animation, sound..., but tricky for costume, as they could be used in any scene

Renaming a costume will cause scenes that use it to fail.

Costumes are updated even when cancel is pressed (need to COPY the costume?)
    CostumesEditor needs to copy the costume so that cancel works.

Later
=====

Should poses and animations be owned by Resources, or by Costume? Some are used by only one, and therefore is annoying to be in a
big horrible unorganised list.
    When editing a pose it has a "shared" tick box, which just toggles
    When listing Poses shows : all, shared or a single costume's. (via a picker button).
    Pose names are still unique, but default to costumeName.generatedName when first added via a costume and just generatedName otherwise.     
    If an unshared pose is removed from its costume, then it is deleted.
    
Same pattern for sounds and animations, not for font or nine patches.

Make the Costumes tab first (or second).


How about a Scripts tab
    List all scripts double click to edit.
    Show errors / Clear errors

A Gallery
    Import poses, costumes, fonts, animations etc from a set of "games" in the gallery, or from any
    other game's resources.

Is the special Map needed which allows scripted Costume properties to be retrieved from BeanHelper
    Now we have ScriptedObject, isn't it better to have it done that way?
    Would need a "set" version of the special code too.

Scripted Behaviours can't detect MouseEvents.
    The whole Layer as a MouseListener needs looking at.

"include" javascript function, which includes another script file.

Copy the arm binary
    Test Itchy on Pi

Text Costumes.
    Buttons can have sounds and animations

Compile on raspPi?

Get Thrust to run via "launch" without the resource symlinks to itchy.
    Need thrusts jar file to be in a lib directory within its resources, and for the jar to be loaded
    after java has started.

Bucket to be more transparent
Water looks naff

The stars on Drunk Invaders backgrounds should have more variation (alpha and slight colour - maybe size too).

Component : Override all rules. Currently only Font can be overridden.  
    Allow to be reset to default (i.e. be restyled). 

Create a game which uses the GUI        

The Behaviours should have the tags, because its them that have the Interface.
Also, I could change the behaviour, and the tags would magically vanish (without the "removeAll"!
Don't use tags for "active".

Container.render should get the NinePatches to render directly onto the gc, not via a temp surface.
RenderableInterface is rubbish. NinePatches should be told where and how large to draw themselves
   (assuming that they can render onto a existing surface rather than needing a new surface).

Replace crufty render and render2 methods with the concept of a Graphics Context.
To scroll, a sub-layer, push the context, alter its mapping, call the childrens render,
then pop the context.

Appearance optimised so that it doesn't need to re-render the appearance to get the worldRectangle
    Maybe calculate the maximum rectangle for the Pose for any rotation
    When asked for its worldRect, if cached, returned that, other wise if direction == 0, return pose.rectangle * scale, otherwise return maximum rect * scale   




























New Server
==========
Install debian onto the SSD.
Create a single partition 90% of the disk.

Get a spare drive, and format it with one large partition and three small ones.
The small ones will be for swap and /var/log and /tmp
The large one will be for /gidea (a subset)

Get the nvidia driver working
    https://wiki.debian.org/NvidiaGraphicsDrivers

Install all of the software onto root partition, except Myth

Make a backup of
    /gidea/projects
    /home/nick
    /home/nalin
    /gidea/music/ a small subset of default to test only
    /gidea/images

Set the computer name to be giddydom.healthy
And have /etc/hosts resolve giddyserv to localhost and old-giddyserv to 192.168.1.2

tar /etc /boot from real giddyserv and copy it over.

Get tomcat and apache working

Backup and copy over the mythdatabase and familyalbum database (others?)

Remove the old / partition from real giddyserv and replace it with SSD
This also contains /mythdata and /backup
Mount /giddyserv (raid array).

Install the double DVB card
Set up Myth - maybe moving the box down stairs for access to the aerial.

Backup the SSD, so that if it fails, I can get back to a good system quickly.


Firewall
Backup scripts
Website indexer (butchers)



Bed covers
Glasses
Vacuum bathroom
