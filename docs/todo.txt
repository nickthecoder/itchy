Jame is out of date, need to rebuild for win32 and i386 and ARM??
    Compile and test using windows.
    Add the dependant dlls to jame's git tree?
        No. If NuGet can automate the download of dependencies, then an ant task can bundle them.
    Add the compiled dll and .so files to jame's git tree??
        No. Ant task which uploads the compiled object to a ftp server?

What's Next
===========

BUG:
    The editor's quit button is still active after it quits
    
BUG:
    Behaviour properties are a little dodgy - goes wrong when you change the behaviour class name.
    
Choose appropriate defaults for each type of ship and ball, door etc.
   Only if moving slowly.

Create a "Sensor", which opens/closes doors when the ship gets close.
    One side of the door lets Ship1 through, the other side lets Ship2 through, so need to
        switch ships at both ends of the route.
    Create a circular route,

Use annotations to set initial tags :
    @Tagged("deadly") @Tagged("bouncy") class Alien {...)

Try it on a RaspPi
    Need to compile Jame for the ARM processor!

Allow calculated values inside animations?
    Use the Property tag and GProperty types to define the properties

Properties to have a default value.
    Scene designer has a "default" button for each behaviour's property
        Uses the property's default value, which is overriden if there is a string value in the costume.

Picker to have a cancel button

Much of costume editor doesn't work yet!

Scenery Editor

    Properties to have hints (which are in green on the right of their control)
         Use it to put (seconds) after alien factory & alien fireOnceEvery

    Buttons to use icons, not (just?) text
        Would be nice to have tooltips when mouse hovers over the buttons
            A description and the keyboard shortcut.

    Duplicate, Copy, Paste
    
    Undo/Redo

    When save a scene save the resources too

    Warn when exiting the scene designer without saving.

    Warn when exiting the editor without saving.

    Missing properties
        start event
        
    Lock actors (useful for background images) - a padlock icon near a corner?
        
    Make it easy (single click) to create a costume for a Pose just after its been added.
    
    Tags in the editor? Costume would need a set of tags 
    
Copy resources such as a Font when selected from outside the resources folder.


Test button on Animation Editor.


Possible Refactoring
====================

TextBox to have an inner class for its layout rather than implement it.

FlowLayout - calculateRequirements is weird


Bugs
====

Popup windows dont center themselves when window grows. Should they?

Check what happens when you load and save and reload a single non-compound animation. Is it right?
   In the editor, the top-most animation must always be a CompoundAnimation

On Remove, there is no check that the resource isn't being used by something else.
    Easy pose, animation, sound..., but tricky for costume, as they could be used in any scene
    
Renaming a costume will cause scenes that use it to fail.

Loading sounds doesn't always fail when not a sound file - bug in Jame?

Scrollbar positioned to the right of the client, i.e. like horizontal layout.
  If tables want it inside, then *they* can do the minus margins tricks.
  
Costumes are updated even when cancel is pressed (need to COPY the costume?)

  
Later Features
==============

Hook it up with GitHub!
    Game designers can exchange games via github
    Issues with trust - could use java's sandboxing to prevent malicious code running.

PoseDecorator - Takes a Pose and decorates it, making another Pose. Appearance can have a list of
decorators, which are applied in turn.
   e.g. Speech bubble around text, Button images around text, drop shadows, blur
   

Giant invaders, each pixel is shot individually
   Use Surface.getPixel to discover which pixels are set, and then create a corresponding Follower
        The parent of these followers is invisible, and dies when the last of its followers die.
   If allowed to grow, then each pixel becomes an invader
   Maybe invaders are fed from the saucer.

If strings begin with "_", then look them up in a I18N resource
    Will need to do the same for the editor.

Stretchy NinePatches as well as clever NinePatches, which tile AND scale, so that an exact number
of tiles are used. e.g. if the span is 3.5, then 3 tiles will be used, scaled up a little.
As well as the "middle" behaviour (empty, tile, fill, stretch, clever), we have a behaviour for
the edges (tile, stretch, clever).

DirectionAnimation, sets the angle - similar, but not the same as turn.

AlphaTransitionAnimation - moves from one Image to another by changing the alpha of each.
    Or create a Follower underneith which changes its alpha and its parent's until the parent is
    fully transparent, at which point it changes its pose.

Animations which change a Pose's offsets or other attributes
   Would need to ensure that it is a COPY of the pose, not the one shared in Resources.
   This could make it easier to animate a "bump" upwards.

Make everything use a consistent Random, so that each game is repeatable. 

Each repeatable item in a costume has a frequency, so that some appear less frequently than others.

Itchy to store all events so that they can be played back

New Game wizard

Low CPU mode for Itchy, will allow the editor to run without large CPU usage.
The display is only updated when the GuiPoses have been altered.

Default Button (clicks itself when ENTER is hit)

Cancel button (clicks itself when ESC is hit)

Stretch NinePatches, as well as tiled.

Multi-line text.

Fullscreen 


Later Possible Refactoring
==========================


The Behaviours should have the tags, because its them that have the Interface.
Also, I could change the behaviour, and the tags would magically vanish (without the "removeAll"!
Don't use tags for "active".

Container.render should get the NinePatches to render directly onto the gc, not via a temp surface.
RenderableInterface is rubbish. NinePatches should be told where and how large to draw themselves
   (assuming that they can render onto a existing surface rather than needing a new surface).


Other Thoughts
==============

Consider how to implement Asteriods' dougnut shaped universe. Is there a better solution than every
behaviour enforcing the loops in the coordinate systems, or could all Actors be coerced to do it automatically?
Documentation - javadocs and class diagrams


Create special styles "firstChild", which are automagically available, but never set (they are evaluated).
  Remove the "firstColumn" stuff from Table
  Check it by adding horizontal lines to the tables (except the first).
OR
  Create a child number criteria e.g. "foo #3" is the 3rd child of a foo component.
  So firstChild would just be "foo #1"
  
Mapping of keys, rather than hard-code
    Create a GUI which any game can call upon.


Finish DrunkInvaders
====================
   
Levels / Lives / Whatever to finish the game play.

tick/tock sounds

Pixel Explosion
    Create a list of points of the pose, create a projectile for each, and
    expand then away at a speed proportional from their distance to the center + a little randomness,

Write a script which takes a simple bitmap, enlarges it, adds the grid and fuzzy borders.
    Create a series of poses and use FramedAnimation.



Replace crufty render and render2 methods with the concept of a Graphics Context.
To scroll, a sub-layer, push the context, alter its mapping, call the childrens render,
then pop the context.


Pause
    boolean Behaviour.activeWhilePaused
    Itchy.isPaused
    Itchy.setPause( boolean )


Appearance optimised so that it doesn't need to re-render the appearance to get the worldRectangle
    Maybe calculate the maximum rectangle for the Pose for any rotation
    When asked for its wordRect, if cached, returned that, other wise if direction == 0, return pose.rectangle * scale, otherwise return maximum rect * scale   

Tile optimisation for collision detection and/or redraw optimisation.
   When things are placed in the world, calculate which tile they overlap and/or which tile their
   center is on. Allow for easy iteration over all objects within nearby tiles.



Create a handful of simple, short games showing off how little code it takes to write a fun game.
    Rain
    Driving game (similar to rain, but with less obstacles, and road edges)
    Tetris?
    Saloon sally
    Purple meanies? Trap monsters to kill them, push blocks is easy, destroying blocks takes more time.
    
    Add a menu to switch from one game to another.    

Rox - it would be nice to reproduce every level, so that they can be played on modern hardware.




Tetris
======
Each Piece has a central square, and a set of others, which are rotated around the central square.
    Well, almost, the long one only has two states, not four, so it isn't truly rotated.
The game area is a grid, where the left, right and bottom edges are solid.
Pieces are added at the top, with the central square 2 down from the top. 

Cyan (I)   : ll,r; u,dd (-1,0 -2,0 1,0 ) (0,1 0,-1, 0,-2)
Yellow (O) : dlu; dlu;  (-1,0 -1,-1, 0,-1) 
Green (S)  : r,dl; u,rd (1,0 -1,0 -1,-1) (0,1 1,0 1,-1)
Red (Z)    : l,dr; ru,d (-1,0 0,-1 1,-1) (1,0 1,1, 0,-1)
Orange (L) : ld,r; dr,u; ru,l; ul,d (-1,0 -1,-1 1,0) (0,-1 1,-1 0,1) (1,0 1,1 -1,0) (0,1 -1,1 0,-1)
Blue (J)   : l,rd; d,ur; r,lu; u,dl (-1,0 1,0 1,-1) (0,-1 0,1 1,1) (1,0 -1,0 -1,1) (0,1 0,-1 -1,-1)
Purple (T) : l,r,d; u,d,r; l,r,u; d,u,l (-1,0 1,0 0,-1) (0,1 0,-1 0,1) (-1,0 1,0 0,1) (0,-1 0,1 -1,0)
