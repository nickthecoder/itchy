Jame is out of date, need to rebuild for win32 and i386 and ARM??
    Compile and test using windows.
    Add the dependant dlls to jame's git tree?
        No. If NuGet can automate the download of dependencies, then an ant task can bundle them.
    Add the compiled dll and .so files to jame's git tree??
        No. Ant task which uploads the compiled object to a ftp server?

What's Next
===========

Change Animations "profile" to "ease" and related classes

EaseButton to show the thumbnail graph.

Load/Save ManagedSound attributes of Costume's sound
    Use Property for all attributes, for both load/save and editing across the whole GUI. 

Bucket to be more transparent
Water looks naff
No instructions for picking up water

Turn mouse pointer off

Move appearance properties to their own tab, rather than on Actor tab.

Finish CostumesEditor

Pause - Use Tetra to try it out.
    Game still ticks, but not any of the actors.
    A boolean on Game?

Create a GenericGame, which can load arbitrary resources (for a simple start to a game)
    Started (called Launcher).

Use SceneBehaviour in the games.

Create a game which uses the GUI        
    The Rules object needs to be on Game, its probably on Itchy right now.

Use annotations to set initial tags :
    @Tagged("deadly") @Tagged("bouncy") class Alien {...)
    Allow touching using interface/class, and it returns it in the correct type.

Costumes can have properties (not per instance of Actor, but per Costume)
    Already have a half measure by using the String resources, but I should bin that, and introduce real properties
    Add a "scope" to the property tag. Either "behaviour" or "costume".

Try it on a RaspPi
    Need to compile Jame for the ARM processor!


Minor BUGS
==========

One of the animation profiles shows that the NumericAnimation isn't quite right.
    

Bugs
====

When a window has no focusable components, then it recurses till the stack explodes.

Designer can scale actors to -ve values, which are then unselectable

Popup windows dont center themselves when window grows. Should they?

Check what happens when you load and save and reload a single non-compound animation. Is it right?
   In the editor, the top-most animation must always be a CompoundAnimation

On Remove, there is no check that the resource isn't being used by something else.
    Easy pose, animation, sound..., but tricky for costume, as they could be used in any scene
    
Renaming a costume will cause scenes that use it to fail.

Costumes are updated even when cancel is pressed (need to COPY the costume?)

Later Possible Refactoring
==========================


The Behaviours should have the tags, because its them that have the Interface.
Also, I could change the behaviour, and the tags would magically vanish (without the "removeAll"!
Don't use tags for "active".

Container.render should get the NinePatches to render directly onto the gc, not via a temp surface.
RenderableInterface is rubbish. NinePatches should be told where and how large to draw themselves
   (assuming that they can render onto a existing surface rather than needing a new surface).


Replace crufty render and render2 methods with the concept of a Graphics Context.
To scroll, a sub-layer, push the context, alter its mapping, call the childrens render,
then pop the context.

Appearance optimised so that it doesn't need to re-render the appearance to get the worldRectangle
    Maybe calculate the maximum rectangle for the Pose for any rotation
    When asked for its wordRect, if cached, returned that, other wise if direction == 0, return pose.rectangle * scale, otherwise return maximum rect * scale   

Tile optimisation for collision detection and/or redraw optimisation.
   When things are placed in the world, calculate which tile they overlap and/or which tile their
   center is on. Allow for easy iteration over all objects within nearby tiles.


