
BUGS
====

TextArea's background center of nine path is flat colour rather than tiled.

SceneDesigner doesn't use the full width when window is maximised
SceneDesigner toolbox isn't moved when the window is maximised (floats in middle of the screen).

New Features
============

Create Node interface
	Stage and Actor implement it
	Create RootNode too, which only allows Stages as children.
	Create Tree Component and use it to show the Node hierarchy.

Generic Hierarchy Node/ParentNode interface. Actors and Stages will be ParentNodes
	This allows for composite objects.
	For example the drunk invaders speech bubbles are children of the main actor
	How should transformations of the parent affect the children?
		Does a rotation rotate the speech bubble around the center of the alien, and should the bubble also rotate?
	The child actor has a PositionRelationship
		The default is class "Glued", which follows the rotations, translations and scales
		Or could be Follow, which ignores scales and rotations
	This will make Follower redundant. Good!
	Will we need more animation types, to move relative to the parent.
		MoveForwards :
			forwards (pixels)
			sideways (pixels)
			using "direction", "heading", "fromParent", "custom angle" (enum)
			custom angle (degrees)
				Maybe "custom angle" is added to direction/heading/fromParent for maximum flexibility
			When "fromParent", should the angle be calculated once per frame, or only at the start of the animation?
				Each frame - making it consistent with direction/heading, which may be updated each frame.

	While I'm at it, why can't GUI components use the same hierarchy.
		This will allow a GUI to be built using the editor!		
		GUIVIew will be just another ParentNode	
		Grids won't work well, because the children are added via the LayoutManager, not the Container.
			Will just have to add extra glue
			Will also need extra NullComponents added manually when there are empty gaps in the grid.
			More glue needed to allow for components to be moved around.
				In fact, this will force GridLayouts to use the parent container's collection of children, rather than its own. 


Sprite Sheet Pose
    Allow multiple poses to be loaded from one image, and define the rectangle of each sub-image.

Code Tidy Up
============

Rename one of the Button classes. ButtonRole

Look at groovy and python game code, and try to simplify it.
	Auto import itchy.* - also jame.* and/or jame.event.* ?
	Make properties easy
	Make CostumeProperties easier - Can we replace it with a simple HashMap? CostumeProperties never have any processing in them.

Look at companion, it has font, font size and color. Why ????
    Check sub classes for get/set for font colour size etc. I think this is done now???
    Check sub classes for margins???

Talk and TalkProjectile
    Talk doesn't have "fade", which is the only reason that Gate uses TalkProjectile (it doesn't move!!!)
    Should talk use animations to fade and die or a constant, hard-wired fade?
    Do we need Talk.stop now that we have TalkProjectile? It was originally there, so that it wouldn't follow!

    Zoom in/out : Scale all GridRole objects. Care needed if/when creating new objects.

See KeyInput - there is no super modifier, therefore KeyInput should not have it either.

Should TextPose have a TextStyle, rather than individual attributes?

Why have a Role interface if everything will end up using AbstractRole?
    Why does Role have "birth" and yet everything uses onBirth() ? Ditto with other events.
    At least make Role have the methods that people will actually use ie. onBirth rather than birth.
    Actor could have any boilerplate code that is currently in AbstractRole.


Rox Ideas
=========
    Have a music layer, which has notes at each point. When an object moves over it, call that note's event to play the note.
        When a player stays one square, continue to play the square's note(s)
            The player has events, and the squares have event names. Use animations to control the sequence of notes played?
                Use the player's animations, but animate the Note object so that it doesn't interfere with the player's normal animation.
        Can have a high tempo piece whenever you hover on a "dangerous" or important square.
        Different characters will play different samples (but of the same basic note).
        The "correct" way through the puzzle should always sound harmonious
        Have set riffs, which can be played in different keys.
            While moving across a same-key field, it will sound like "Bah-Bah-Bah-Bah" for each square walked.
            Then when you stand still, the riff continues "Bah-da-da-da-Bah-da-da".
        Some square are silent.
        The square knows the name of the note, but the level know the instrument to use. The sample to use if "$instrument-$note".
        Some music squares can change the instrument too. From and To at choke points
        Use the editor's strings to define the riffs??
        Would be nice to have a visual representation of the music squares values.
            Use Makeup to achieve this?
            Can use colour to denote the note - hue for A-G and saturation/brightness for the octave. Background pattern for the instrument.
        Put the music in the grid at the same time as the GridRoles.
        Use classic songs for some obvious-ish pathways.


Other Stuff
===========

SceneDesigner for Text
    In the toolbox, if a Costume has no "default" pose, but does have a "default" TextStyle, then it is text.
    Actor should only have a Constructor which takes a Costume. Make Costume mandatory.
        We can have a helper method, which takes an arbitary pose, and creates a costume.
    Don't have a "Text" tool??
    When loading, existing text won't have a costume, in which case, create a costume for each
        Font (or maybe font,font-size combo).
    The thumbnail should have the font-size in the bottom right if its bigger than the thumbnail can display.
        Using an Editor's font, because we want a plain, consistant font.
    Attributes for a single actor can be overridden, such as color, alignment.
    When saving an actor, only save the attributes which differ from the costume's style.
    Have a "Reset to Costume Defaults", and a "Apply to Costume" buttons.


Group Costumes on the SceneDesigner's toolbox, so that similar costumes can be displayed as a single item.
    Clicking it reveals a popup, where the actual Costume can be selected.
    Use this for Pyrox's machines, one way streets, and maybe even the walls.
        A costume can have a "Group Leader" field, which is the name of the Costume that is displayed as the
        main icon in the scene design toolbox. Similar impl as "costume base"

SceneDesigner : select groups of actors, and move/delete them together.

Dynamic class loader for game jar files, which live in resources/foo/lib/ or ./lib when outside of itchy's resources directory.

Make Text Costumes real costumes - Don't use the "Text" tool.
    Thumbnail to include the colour and the text "Abc".
    Don't add a String to the costume when creating it.
    Try to rationalise Actor's constructor - can I force it to have a Costume now?
        Actor(Costume, String poseName = "default" ) i.e. just two constructors.
        If a Pose is found use it, else if a Font is found use that, otherwise use a dummy 1x1 surface, and issue a warning.
    During load - if it finds a "text", then generate a costume which is used by later "text" actors.

Need to allow Makeup appear at any stage in the pipeline from the editor. e.g. a Decoration which should not be rotated with the actor.
Or a clip done at the end.
    A tick box "Advanced" will reveal a Compound Makeup as a table, with the standard items as well as the current Makeup if its not Null.

Tiled background - instead of a RGBA, specify a Pose, and tile it in a Grid.
    More generic - Create a BackgroundView interface
    RGBABackground
    Tile, BrickH, BrickV, TileH, TileV (spacing can be different to the image size)

Explosion and Projectile don't work very well with text - See Gate.collected.

Should Costumes have Makeup? If each jewel is given a Sparkle makeup, does it make sense to apply it to every jewel in the scene?
    No. A diamond costume would specify a standard makeup, which can be overridden if needed.
    Have a reset button to revert to the costume's makeup, or default makeup if it has none.
    Costumes' makeup just like animations - based on events, and can have multiple options picked a random.

Costume editor to have filters on event name and resource type.
    i.e. show all Animations, or show all "death" events, or show all "death" Animations or show everything.
    Should the filters stay as you flick from one Costume to another - Yes, probably.

EntryBox is firing change events for arrow keys.

Allow Compound makeups
Glitter Makeup - sprinkle poses randomly. use getpixel.
Decoration - Adds a Pose to a given place relative to the actor's x,y.
Underscore - used for text poses to place a line under the text. Use "_" to create the line,  or Surface.fill.
    Use it on link text when compound makeup is available.

Companion string names wont be renamed when a costume is renamed.
    Create a first class citizen "CompanionCostume"
    Get rid of old string based code.

Later
=====

Use JBox2D : http://www.jbox2d.org/

GUIView.keyUp does nothing - is this ok?

Joystick input devices.

Optimise Explosion by using fixAppearance for projectiles which are turned, but won't rotate.
    maybe just add a fix boolean, and leave it up to the user to do it.

Create a Compound Role, which has a ClassName array of other Roles
    It has one AbstractProperty, who's Component is a table with Add/Remove Up/Down buttons, and clicking on any row show the
    properties for that row.
        Get this working for Role, and maybe it could be made generic for Makeup too.

BlitModes on Pose, so a "spotlight" can ADD

"Duplicate" button in Animation editor - maybe on Costume too.

Drag and drop to move and reorder animation in the editor.
    Replace the whole AnimationEditor with a timeline, where sequence are arranged left to right and parallel are stacked top to bottom.
    Test and edit are done in the same full screen editor - like scene designer.
    Add: Pick a pose, then place it on the world.
    A large time-line pane shows an overview of the animation. Dragging controls will change the tick or loops of the animation.
        Can fill the whole page, with the animation on top of it.
    Click at a point in the time-line to show that frame.
    Save the pose and start x,y, direction, heading with each animation ("test" tag)

Explanatory games
    e.g. Showing the different between heading and direction.

Catch all ScriptExceptions
    Report them to ScriptErrorLog, which will also write to stderr (not as a stack trace)
    An icon on the popup Layer shows when a new error has occurred. Click to open the log viewer.
        "Clear" button will remove the icon from the popup layer.

Much Later
==========

Simple convolution filter
    Filters don't need to be square.
    Create empty space around the image. Later give option of duping the image's edge.
    Apply the convolution matrix.
        For RGB, just apply the matrix to each channel in turn.
        For RGBA we'd need to change the final DIVIDE to discount transparent pixels. i.e divide by sum of matrix * alphas.
        Apply the matrix to alpha as normal.

   Many things just need the alpha channel convolved?

Look at rotozoom, and try to implement a generic affine transformation matrix???
    Calc size of dest
    Calc pos of corners
    Bresinem walk from translated top left to bottom left.
        Bres walk across the "row"
        Copy pixel.
    That only leaves the problem of blending.
        Instead of choosing one src pixel, we consider the rectangle from the source
            Where the rect is large, average multiple pixels
            Where the rect is small (less than 2x2 pixels), average parts of each pixel.

Should poses and animations be owned by Resources, or by Costume? Some are used by only one, and therefore is annoying to be in a
big horrible unorganised list.
    When editing a pose it has a "shared" tick box, which just toggles.
        Defaults to true when adding a pose via PosesEditor
        Defaults to false when adding via the CostumesEditor (if that gets written).
        When a pose is used by a second costume, it is also changed to true (must be done post-save).
    When listing Poses shows : all, shared or a single costume's. (via a picker button). Defaults to shared.
    Animation names are still unique, but default to costumename.x when added via costumeseditor.
    If an unshared pose is removed from its costume, then it is deleted - only acceptable if shared is hidden from the user.
    CostumesEditor needs Add -> Pose, New Pose, Animation, New Animation etc.

    The "shared" tick box currently is useless, so either use it, or remove it.
    Add an "unused" filter, which lists poses not used by a Costume, and let them be deleted manually.

Same pattern for sounds and animations, not for font or nine patches.


How about a Scripts tab
    List all scripts double click to edit.
    Show errors / Clear errors

A Gallery
    Import poses, costumes, fonts, animations etc from another game.
    Create a game just for this purpose.

Get Thrust to run via "launch" without the resource symlinks to itchy.
    Need thrust's jar file to be in a lib directory within its resources, and for the jar to be loaded
    after java has started.

iThrust
	Bucket to be more transparent
	Water looks naff

Component : Override all rules. Currently only Font can be overridden.
    Allow to be reset to default (i.e. be restyled).

Create a game which uses the GUI

Container.render should get the NinePatches to render directly onto the gc, not via a temp surface.
RenderableInterface is rubbish. NinePatches should be told where and how large to draw themselves
   (assuming that they can render onto a existing surface rather than needing a new surface).

Replace crufty render and render2 methods with the concept of a Graphics Context.
To scroll, a sub-layer, push the context, alter its mapping, call the childrens render,
then pop the context.

Appearance optimised so that it doesn't need to re-render the appearance to get the worldRectangle
    Maybe calculate the maximum rectangle for the Pose for any rotation
    When asked for its worldRect, if cached, returned that, other wise if direction == 0, return pose.rectangle * scale, otherwise return maximum rect * scale
























